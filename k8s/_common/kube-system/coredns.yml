---
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: coredns
  namespace: kube-system
  labels:
    app.kubernetes.io/instance: coredns
    app.kubernetes.io/name: coredns
    kubernetes.io/cluster-service: "true"
spec:
  privileged: false
  allowPrivilegeEscalation: false
  allowedCapabilities:
    - CAP_NET_BIND_SERVICE
  volumes:
    - configMap
    - emptyDir
    - projected
    - secret
    - downwardAPI
  hostNetwork: false
  hostIPC: false
  hostPID: false
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
  supplementalGroups:
    rule: MustRunAs
    ranges:
      - min: 1
        max: 65535
  fsGroup:
    rule: MustRunAs
    ranges:
      - min: 1
        max: 65535
  readOnlyRootFilesystem: false

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: coredns
  namespace: kube-system
  labels:
    app.kubernetes.io/instance: coredns
    app.kubernetes.io/name: coredns
    kubernetes.io/cluster-service: "true"
data:
  NodeHosts: ""
  Corefile: |-
    .:53 {
        reload
        cache 30
        errors
        health
        kubernetes cluster.local
        autopath @kubernetes
        hosts /etc/coredns/NodeHosts {
          reload 1s
          fallthrough
        }
        loadbalance
        prometheus 0.0.0.0:9153
        loop
        forward . /etc/resolv.conf
    }

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: coredns
  namespace: kube-system
  labels:
    app.kubernetes.io/instance: coredns
    app.kubernetes.io/name: coredns
    kubernetes.io/cluster-service: "true"

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: coredns
  labels:
    app.kubernetes.io/instance: coredns
    app.kubernetes.io/name: coredns
    kubernetes.io/cluster-service: "true"
rules:
  - apiGroups:
      - ""
    resources:
      - endpoints
      - services
      - pods
      - namespaces
    verbs:
      - list
      - watch
  - apiGroups:
      - policy
      - extensions
    resources:
      - podsecuritypolicies
    verbs:
      - use
    resourceNames:
      - coredns
  - apiGroups:
      - discovery.k8s.io
    resources:
      - endpointslices
    verbs:
      - list
      - watch

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: coredns
  labels:
    app.kubernetes.io/instance: coredns
    app.kubernetes.io/name: coredns
    kubernetes.io/cluster-service: "true"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: coredns
subjects:
  - kind: ServiceAccount
    name: coredns
    namespace: kube-system

---
apiVersion: v1
kind: Service
metadata:
  name: coredns
  namespace: kube-system
  labels: &labels
    app.kubernetes.io/instance: coredns
    app.kubernetes.io/name: coredns
    kubernetes.io/cluster-service: "true"
spec:
  selector:
    <<: *labels
  ports:
    - { port: 53, protocol: UDP, name: udp-53 }
    - { port: 53, protocol: TCP, name: tcp-53 }
    - { port: 9153, protocol: TCP, name: metrics }
  clusterIP: 10.43.0.10

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: coredns
  namespace: kube-system
  labels: &labels
    app.kubernetes.io/instance: coredns
    app.kubernetes.io/name: coredns
    kubernetes.io/cluster-service: "true"
  annotations:
    fluxcd.io/tag.coredns: semver:~1
    fluxcd.io/automated: "true"
spec:
  replicas: 2
  selector:
    matchLabels:
      <<: *labels
  template:
    metadata:
      labels:
        <<: *labels
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
        scheduler.alpha.kubernetes.io/tolerations: '[{"key":"CriticalAddonsOnly", "operator":"Exists"}]'
    spec:
      serviceAccountName: coredns
      dnsPolicy: Default
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  <<: *labels
              topologyKey: kubernetes.io/hostname
      containers:
        - name: coredns
          image: coredns/coredns:1.8.3
          imagePullPolicy: IfNotPresent
          args: ["-conf", "/etc/coredns/Corefile"]
          volumeMounts:
            - name: config
              mountPath: /etc/coredns
              readOnly: true
          resources:
            limits: &resources
              cpu: 100m
              memory: 64Mi
            requests:
              <<: *resources
              cpu: 10m
          ports:
            - { containerPort: 53, protocol: UDP, name: udp-53 }
            - { containerPort: 53, protocol: TCP, name: tcp-53 }
            - { containerPort: 9153, protocol: TCP, name: metrics }
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
      volumes:
        - name: config
          configMap:
            name: coredns
            items:
              - key: Corefile
                path: Corefile
              - key: NodeHosts
                path: NodeHosts
