---
apiVersion: v1
kind: ConfigMap
metadata:
  name: longhorn-default-setting
  namespace: longhorn-system
data:
  default-setting.yaml: |-
    backup-target:
    backup-target-credential-secret:
    allow-recurring-job-while-volume-detached:
    create-default-disk-labeled-nodes:
    default-data-path:
    replica-soft-anti-affinity:
    storage-over-provisioning-percentage:
    storage-minimal-available-percentage:
    upgrade-checker:
    default-replica-count:
    default-data-locality:
    guaranteed-engine-cpu:
    default-longhorn-static-storage-class:
    backupstore-poll-interval:
    taint-toleration:
    priority-class:
    auto-salvage:
    auto-delete-pod-when-volume-detached-unexpectedly:
    disable-scheduling-on-cordoned-node:
    replica-zone-soft-anti-affinity:
    volume-attachment-recovery-policy:
    node-down-pod-deletion-policy:
    allow-node-drain-with-last-healthy-replica:
    mkfs-ext4-parameters:
    disable-replica-rebuild:
    replica-replenishment-wait-interval:
    disable-revision-counter:
    system-managed-pods-image-pull-policy:
    allow-volume-creation-with-degraded-availability:
    auto-cleanup-system-generated-snapshot:

---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: longhorn
provisioner: driver.longhorn.io
allowVolumeExpansion: true
reclaimPolicy: Delete
volumeBindingMode: Immediate
parameters:
  numberOfReplicas: "2"
  staleReplicaTimeout: "2880"
  dataLocality: best-effort
  recurringJobs: |
    [{"name":"snap", "task":"snapshot", "cron":"*/30 * * * *", "retain":1},
    {"name":"backup", "task":"backup", "cron":"*/60 * * * *", "retain":1,
    "labels": {"interval":"60m"}}]

---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: longhorn-minio
provisioner: driver.longhorn.io
allowVolumeExpansion: true
reclaimPolicy: Delete
volumeBindingMode: WaitForFirstConsumer
parameters:
  numberOfReplicas: "1"
  staleReplicaTimeout: "2880"
  dataLocality: best-effort
  recurringJobs: |
    [{"name":"snap", "task":"snapshot", "cron":"*/30 * * * *", "retain":1},
    {"name":"backup", "task":"backup", "cron":"*/60 * * * *", "retain":1,
    "labels": {"interval":"60m"}}]

---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: longhorn-fast
provisioner: driver.longhorn.io
allowVolumeExpansion: true
reclaimPolicy: Delete
volumeBindingMode: Immediate
parameters:
  numberOfReplicas: "2"
  staleReplicaTimeout: "2880"
  diskSelector: nvme
  dataLocality: best-effort
  recurringJobs: |
    [{"name":"snap", "task":"snapshot", "cron":"*/30 * * * *", "retain":1},
    {"name":"backup", "task":"backup", "cron":"*/60 * * * *", "retain":1,
    "labels": {"interval":"60m"}}]

---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: longhorn-manager
  name: longhorn-manager
  namespace: longhorn-system
spec:
  selector:
    matchLabels:
      app: longhorn-manager
  template:
    metadata:
      labels:
        app: longhorn-manager
    spec:
      containers:
        - name: longhorn-manager
          image: longhornio/longhorn-manager:v1.1.0
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: true
          command:
            - longhorn-manager
            - -d
            - daemon
            - --engine-image
            - longhornio/longhorn-engine:v1.1.0
            - --instance-manager-image
            - longhornio/longhorn-instance-manager:v1_20201216
            - --share-manager-image
            - longhornio/longhorn-share-manager:v1_20201204
            - --manager-image
            - longhornio/longhorn-manager:v1.1.0
            - --service-account
            - longhorn-service-account
          ports:
            - containerPort: 9500
              name: manager
          readinessProbe:
            tcpSocket:
              port: 9500
          volumeMounts:
            - name: dev
              mountPath: /host/dev/
            - name: proc
              mountPath: /host/proc/
            - name: longhorn
              mountPath: /var/lib/longhorn/
              mountPropagation: Bidirectional
            - name: longhorn-default-setting
              mountPath: /var/lib/longhorn-setting/
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            # Should be: mount path of the volume longhorn-default-setting + the key of the configmap data in 04-default-setting.yaml
            - name: DEFAULT_SETTING_PATH
              value: /var/lib/longhorn-setting/default-setting.yaml
      volumes:
        - name: dev
          hostPath:
            path: /dev/
        - name: proc
          hostPath:
            path: /proc/
        - name: longhorn
          hostPath:
            path: /var/lib/longhorn/
        - name: longhorn-default-setting
          configMap:
            name: longhorn-default-setting
      #      imagePullSecrets:
      #      - name: ""
      serviceAccountName: longhorn-service-account
  updateStrategy:
    rollingUpdate:
      maxUnavailable: "100%"

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: longhorn-manager
  name: longhorn-backend
  namespace: longhorn-system
spec:
  type: ClusterIP
  sessionAffinity: ClientIP
  selector:
    app: longhorn-manager
  ports:
    - name: manager
      port: 9500
      targetPort: manager

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: longhorn-ui
  name: longhorn-ui
  namespace: longhorn-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: longhorn-ui
  template:
    metadata:
      labels:
        app: longhorn-ui
    spec:
      containers:
        - name: longhorn-ui
          image: longhornio/longhorn-ui:v1.1.0
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 0
          ports:
            - containerPort: 8000
              name: http
          env:
            - name: LONGHORN_MANAGER_IP
              value: "http://longhorn-backend:9500"
#      imagePullSecrets:
#      - name:

---
kind: Service
apiVersion: v1
metadata:
  labels:
    app: longhorn-ui
  name: longhorn-frontend
  namespace: longhorn-system
spec:
  type: ClusterIP
  selector:
    app: longhorn-ui
  ports:
    - name: http
      port: 80
      targetPort: http
      nodePort: null

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: longhorn-driver-deployer
  namespace: longhorn-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: longhorn-driver-deployer
  template:
    metadata:
      labels:
        app: longhorn-driver-deployer
    spec:
      initContainers:
        - name: wait-longhorn-manager
          image: longhornio/longhorn-manager:v1.1.0
          command:
            [
              "sh",
              "-c",
              'while [ $(curl -m 1 -s -o /dev/null -w "%{http_code}" http://longhorn-backend:9500/v1) != "200" ]; do echo waiting; sleep 2; done',
            ]
      containers:
        - name: longhorn-driver-deployer
          image: longhornio/longhorn-manager:v1.1.0
          imagePullPolicy: IfNotPresent
          command:
            - longhorn-manager
            - -d
            - deploy-driver
            - --manager-image
            - longhornio/longhorn-manager:v1.1.0
            - --manager-url
            - http://longhorn-backend:9500/v1
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: SERVICE_ACCOUNT
              valueFrom:
                fieldRef:
                  fieldPath: spec.serviceAccountName
          # Manually set root directory for csi
          #- name: KUBELET_ROOT_DIR
          #  value: /var/lib/rancher/k3s/agent/kubelet
          # For AirGap Installation
          # Replace PREFIX with your private registery
          #- name: CSI_ATTACHER_IMAGE
          #  value: PREFIX/csi-attacher:v2.2.1-lh1
          #- name: CSI_PROVISIONER_IMAGE
          #  value: PREFIX/csi-provisioner:v1.6.0-lh1
          #- name: CSI_NODE_DRIVER_REGISTRAR_IMAGE
          #  value: PREFIX/csi-node-driver-registrar:v1.2.0-lh1
          #- name: CSI_RESIZER_IMAGE
          #  value: PREFIX/csi-resizer:v0.5.1-lh1
          #- name: CSI_SNAPSHOTTER_IMAGE
          #  value: PREFIX/csi-snapshotter:v2.1.1-lh1
          # Manually specify number of CSI attacher replicas
          #- name: CSI_ATTACHER_REPLICA_COUNT
          #  value: "3"
          # Manually specify number of CSI provisioner replicas
          #- name: CSI_PROVISIONER_REPLICA_COUNT
          #  value: "3"
          #- name: CSI_RESIZER_REPLICA_COUNT
          #  value: "3"
          #- name: CSI_SNAPSHOTTER_REPLICA_COUNT
          #  value: "3"
      #imagePullSecrets:
      #- name:
      serviceAccountName: longhorn-service-account
      securityContext:
        runAsUser: 0
